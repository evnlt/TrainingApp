// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TrainingApp.Infrastructure;

#nullable disable

namespace TrainingApp.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230511131950_Test4")]
    partial class Test4
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.5");

            modelBuilder.Entity("TrainingApp.Application.Entities.Excercise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("ExcersiceType")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsBuiltIn")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Excercises", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("23d44a33-f522-4a64-8c4e-f6bb877d55a4"),
                            ExcersiceType = 0,
                            IsBuiltIn = true,
                            Name = "Pullups"
                        },
                        new
                        {
                            Id = new Guid("3baf6f55-69e0-4041-8b66-1150af31e7ce"),
                            ExcersiceType = 0,
                            IsBuiltIn = true,
                            Name = "Ab curl"
                        },
                        new
                        {
                            Id = new Guid("694ef92f-b5d3-4b14-873f-64bbe449a62c"),
                            ExcersiceType = 1,
                            IsBuiltIn = false,
                            Name = "Custom 1"
                        });
                });

            modelBuilder.Entity("TrainingApp.Application.Entities.Routine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Routines", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("719d06cc-30cc-4c40-954d-e6422bbcd6f7"),
                            Name = "Abs"
                        },
                        new
                        {
                            Id = new Guid("0f17e922-6f62-4941-b78b-c40eddb502f2"),
                            Name = "Pull"
                        });
                });

            modelBuilder.Entity("TrainingApp.Application.Entities.RoutineDates", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoutineId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoutineId");

                    b.ToTable("RoutineDates", (string)null);
                });

            modelBuilder.Entity("TrainingApp.Application.Entities.RoutineExcersices", b =>
                {
                    b.Property<Guid>("RoutineId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ExcerciseId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.HasKey("RoutineId", "ExcerciseId");

                    b.HasIndex("ExcerciseId");

                    b.ToTable("RoutineExcercises", (string)null);
                });

            modelBuilder.Entity("TrainingApp.Application.Entities.Set", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Measure")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Reps")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("WorkoutExcerciseId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("WorkoutExcerciseId");

                    b.ToTable("Sets", (string)null);
                });

            modelBuilder.Entity("TrainingApp.Application.Entities.Workout", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDone")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Workouts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("06756c6f-9b19-41ee-a361-71d90bc0514e"),
                            Date = new DateTime(2023, 5, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDone = false,
                            Name = "Abs"
                        },
                        new
                        {
                            Id = new Guid("735c2138-66de-4e51-a94e-8d671271d18b"),
                            Date = new DateTime(2023, 5, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDone = false,
                            Name = "Pull"
                        },
                        new
                        {
                            Id = new Guid("3de03311-56e7-4042-aa02-b73a13f1951a"),
                            Date = new DateTime(2023, 5, 10, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDone = true,
                            Name = "Abs"
                        });
                });

            modelBuilder.Entity("TrainingApp.Application.Entities.WorkoutExcersices", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ExcerciseId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("WorkoutId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ExcerciseId");

                    b.HasIndex("WorkoutId");

                    b.ToTable("WorkoutExcercises", (string)null);
                });

            modelBuilder.Entity("TrainingApp.Application.Entities.RoutineDates", b =>
                {
                    b.HasOne("TrainingApp.Application.Entities.Routine", "Routine")
                        .WithMany("Dates")
                        .HasForeignKey("RoutineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Routine");
                });

            modelBuilder.Entity("TrainingApp.Application.Entities.RoutineExcersices", b =>
                {
                    b.HasOne("TrainingApp.Application.Entities.Excercise", "Excercise")
                        .WithMany("RoutineExcersices")
                        .HasForeignKey("ExcerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrainingApp.Application.Entities.Routine", "Routine")
                        .WithMany("RoutineExcersices")
                        .HasForeignKey("RoutineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Excercise");

                    b.Navigation("Routine");
                });

            modelBuilder.Entity("TrainingApp.Application.Entities.Set", b =>
                {
                    b.HasOne("TrainingApp.Application.Entities.WorkoutExcersices", "WorkoutExcercises")
                        .WithMany("Sets")
                        .HasForeignKey("WorkoutExcerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkoutExcercises");
                });

            modelBuilder.Entity("TrainingApp.Application.Entities.WorkoutExcersices", b =>
                {
                    b.HasOne("TrainingApp.Application.Entities.Excercise", "Excercise")
                        .WithMany("WorkoutExcersices")
                        .HasForeignKey("ExcerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrainingApp.Application.Entities.Workout", "Workout")
                        .WithMany("WorkoutExcersices")
                        .HasForeignKey("WorkoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Excercise");

                    b.Navigation("Workout");
                });

            modelBuilder.Entity("TrainingApp.Application.Entities.Excercise", b =>
                {
                    b.Navigation("RoutineExcersices");

                    b.Navigation("WorkoutExcersices");
                });

            modelBuilder.Entity("TrainingApp.Application.Entities.Routine", b =>
                {
                    b.Navigation("Dates");

                    b.Navigation("RoutineExcersices");
                });

            modelBuilder.Entity("TrainingApp.Application.Entities.Workout", b =>
                {
                    b.Navigation("WorkoutExcersices");
                });

            modelBuilder.Entity("TrainingApp.Application.Entities.WorkoutExcersices", b =>
                {
                    b.Navigation("Sets");
                });
#pragma warning restore 612, 618
        }
    }
}
